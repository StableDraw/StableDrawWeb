# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import stable_draw_grpc_pb2 as stable__draw__grpc__pb2


class StableDraw_gRPCStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Gen_caption = channel.unary_unary(
                '/StableDraw_gRPC/Gen_caption',
                request_serializer=stable__draw__grpc__pb2.FromImageRequest.SerializeToString,
                response_deserializer=stable__draw__grpc__pb2.TextReply.FromString,
                )
        self.Stable_diffusion_text_to_image = channel.unary_unary(
                '/StableDraw_gRPC/Stable_diffusion_text_to_image',
                request_serializer=stable__draw__grpc__pb2.FromTextRequest.SerializeToString,
                response_deserializer=stable__draw__grpc__pb2.ImageReply.FromString,
                )
        self.Stable_diffusion_image_to_image = channel.unary_unary(
                '/StableDraw_gRPC/Stable_diffusion_image_to_image',
                request_serializer=stable__draw__grpc__pb2.FromImageandTextRequest.SerializeToString,
                response_deserializer=stable__draw__grpc__pb2.ImageReply.FromString,
                )
        self.Stable_diffusion_depth_to_image = channel.unary_unary(
                '/StableDraw_gRPC/Stable_diffusion_depth_to_image',
                request_serializer=stable__draw__grpc__pb2.FromImageandTextRequest.SerializeToString,
                response_deserializer=stable__draw__grpc__pb2.ImageReply.FromString,
                )
        self.Stable_diffusion_inpainting = channel.unary_unary(
                '/StableDraw_gRPC/Stable_diffusion_inpainting',
                request_serializer=stable__draw__grpc__pb2.FromImgandMaskandTextRequest.SerializeToString,
                response_deserializer=stable__draw__grpc__pb2.ImageReply.FromString,
                )
        self.Stable_diffusion_upscaler = channel.unary_unary(
                '/StableDraw_gRPC/Stable_diffusion_upscaler',
                request_serializer=stable__draw__grpc__pb2.FromImageandTextRequest.SerializeToString,
                response_deserializer=stable__draw__grpc__pb2.ImageReply.FromString,
                )
        self.Stable_diffusion_upscaler_xX = channel.unary_unary(
                '/StableDraw_gRPC/Stable_diffusion_upscaler_xX',
                request_serializer=stable__draw__grpc__pb2.FromImageandTextRequest.SerializeToString,
                response_deserializer=stable__draw__grpc__pb2.ImageReply.FromString,
                )
        self.Upscale = channel.unary_unary(
                '/StableDraw_gRPC/Upscale',
                request_serializer=stable__draw__grpc__pb2.FromImageRequest.SerializeToString,
                response_deserializer=stable__draw__grpc__pb2.ImageReply.FromString,
                )
        self.Delete_background = channel.unary_unary(
                '/StableDraw_gRPC/Delete_background',
                request_serializer=stable__draw__grpc__pb2.FromImgOnlyRequest.SerializeToString,
                response_deserializer=stable__draw__grpc__pb2.ImageReply.FromString,
                )


class StableDraw_gRPCServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Gen_caption(self, request, context):
        """Генерация описания к изображению
        Принимает: byte входного изображения и параметры
        Возвращает: строку описания изображения
        Структура словаря параметров и параметры по-умолчанию:
        params = {
        "ckpt": "caption_huge_best.pt", #используемые чекпоинты (caption_huge_best.pt или caption_base_best.pt)
        "eval_cider": True,             #оценка с помощью баллов CIDEr
        "eval_bleu": False,             #оценка с помощью баллов BLEU
        "eval_args": "{}",              #аргументы генерации для оценки BLUE или CIDEr, например, "{"beam": 4, "lenpen": 0,6}", в виде строки JSON
        "eval_print_samples": False,    #печатать поколения образцов во время валидации
        "scst": False,                  #Обучение самокритичной последовательности
        "scst_args": "{}",              #аргументы генерации для обучения самокритичной последовательности в виде строки JSON
        "beam": 5,                      #балансировка
        "max_len_a": 0,                 #максимальная длина буфера a
        "max_len_b": 200,               #максимальная длина буфера b
        "min_len": 1,                   #минимальная длина буфера
        "unnormalized": False,          #ненормализовывать
        "lenpen": 1,
        "unkpen": 0,
        "temperature": 1.0,             #температура
        "match_source_len": False,      #сопоставлять с исходной длиной
        "no_repeat_ngram_size": 3,      #не повторять N-граммы размера
        "sampling_topk": 3,             #из скольки тоненов отбирать лучший (0 - не использовать сэмплирование)
        "seed": 7                       #инициализирующее значение для генерации
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stable_diffusion_text_to_image(self, request, context):
        """Генерация изображения по описанию
        Принимает: строку описания и параметры
        Возвращает: int высоты, int ширины сгенерированного изображения и byte самого изображения
        Структура словаря параметров и параметры по-умолчанию:
        params = {
        "steps": 50,            #количество шагов выборки
        "plms": True,           #использовать выборку plms
        "dpm": True,            #использовать выборку DPM (2)
        "ddim_eta": 0.0,        #ddim η (η = 0.0 соответствует детерминированной выборке)
        "C": 4,                 #латентные каналы
        "f": 8,                 #коэффициент понижающей дискретизации, чаще всего 8 или 16
        "scale": 9.0,           #безусловная навигационная величина: eps = eps(x, empty) + scale * (eps(x, cond) - eps(x, empty))
        "ckpt": 0,              #выбор контрольной точки модели (0 или 1 для размерностей 512 или 768 соответственно)
        "seed": 42,             #сид (для воспроизводимой генерации изображений)
        "precision": "autocast" #оценивать с этой точностью ("full" или "autocast")
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stable_diffusion_image_to_image(self, request, context):
        """Генерация изображения по описанияю и изображению
        Принимает: byte входного изображения и параметры
        Возвращает: int высоты, int ширины сгенерированного изображения и byte самого изображения
        Структура словаря параметров и параметры по-умолчанию:
        params = {
        'ddim_steps': 50,             #количество шагов выборки ddim
        'ddim_eta': 0.0,              #ddim η (η = 0.0 соответствует детерминированной выборке)
        'C': 4,                       #латентные каналы
        'f': 8,                       #коэффициент понижающей дискретизации, чаще всего 8 или 16
        'scale': 9.0,                 #безусловная навигационная величина: eps = eps(x, empty) + scale * (eps(x, cond) - eps(x, empty))
        'strength': 0.7,              #сила увеличения/уменьшения шума. 1.0 соответствует полному уничтожению информации в инициализирующем образе
        'ckpt': 0,                    #выбор весов модели (от 0 до 10)
        'seed': 42,                   #сид (для воспроизводимой генерации изображений)
        'precision': "autocast",      #оценивать с этой точностью ("full" или "autocast")
        "max_dim": pow(512, 2)        # я не могу генерировать на своей видюхе картинки больше 512 на 512
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stable_diffusion_depth_to_image(self, request, context):
        """Генерация изображения по описанияю и изображению с применением дополнительного слоя глубины
        Принимает: byte входного изображения, строку описания и параметры
        Возвращает: int высоты, int ширины сгенерированного изображения и byte самого изображения
        Структура словаря параметров и параметры по-умолчанию:
        params = {
        "ddim_steps": 50,           #Шаги DDIM, от 0 до 50
        "ddim_eta": 0.0,            #ddim η (η = 0.0 соответствует детерминированной выборке)
        "scale": 9.0,               #от 0.1 до 30.0
        "strength": 0.9,            #сила увеличения/уменьшения шума. 1.0 соответствует полному уничтожению информации в инициализирующем образе
        "ckpt": 0,                  #выбор весов модели (0)
        "seed": 42,                 #от 0 до 1000000
        "model_type": "dpt_hybrid", #тип модели
        "verbose": True,
        "max_dim": pow(512, 2)      # я не могу генерировать на своей видюхе картинки больше 512 на 512
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stable_diffusion_inpainting(self, request, context):
        """Генерация изображения с изменённым фрагментам по изображению, маске и описанию
        Принимает: byte входного изображения, byte изображения маски, строку описания и параметры
        Возвращает: int высоты, int ширины сгенерированного изображения и byte самого изображения
        Структура словаря параметров и параметры по-умолчанию:
        params = {
        "ddim_steps": 50,           #Шаги DDIM, от 0 до 50
        "ddim_eta": 0.0,            #ddim η (от 0.0 до 1.0, η = 0.0 соответствует детерминированной выборке)
        "scale": 10.0,              #от 0.1 до 30.0
        "strength": 0.9,            #сила увеличения/уменьшения шума. 1.0 соответствует полному уничтожению информации в инициализирующем образе
        "ckpt": 0,                  #выбор весов модели (0)
        "seed": 42,                 #от 0 до 1000000
        "verbose": False,
        "max_dim": pow(512, 2)      #я не могу генерировать на своей видюхе картинки больше 512 на 512
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stable_diffusion_upscaler(self, request, context):
        """Четырёхкратное увеличение разрешения исходного изображения (апскейл) по изображению и описанию
        Принимает: byte входного изображения, строку описания и параметры
        Возвращает: int высоты, int ширины сгенерированного изображения и byte самого изображения
        Структура словаря параметров и параметры по-умолчанию:
        params = {
        "ddim_steps": 50,           #Шаги DDIM, от 2 до 250
        "ddim_eta": 0.0,            #ddim η (от 0.0 до 1.0, η = 0.0 соответствует детерминированной выборке)
        "scale": 9.0,               #от 0.1 до 30.0
        "ckpt": 0,                  #выбор весов модели (0)
        "seed": 0,                  #от 0 до 1000000
        "outscale": 4,              #Величина того, во сколько раз увеличть разшрешение изображения
        "noise_augmentation": 20,   #от 0 до 350
        "verbose": False,
        "max_dim": pow(256, 2)      # я не могу генерировать на своей видюхе картинки больше 256 на 256
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stable_diffusion_upscaler_xX(self, request, context):
        """Многократное (2 предпочтительно) увеличение разрешения исходного изображения (апскейл) по изображению и описанию
        Принимает: byte входного изображения, строку описания и параметры
        Возвращает: int высоты, int ширины сгенерированного изображения и byte самого изображения
        Структура словаря параметров и параметры по-умолчанию:
        params = {
        "ddim_steps": 20,           #Шаги DDIM, от 2 до 250
        "scale": 0.0,               #от 0.1 до 30.0
        "ckpt": 0,                  #выбор весов модели (0)
        "seed": 0,                  #от 0 до 1000000
        "outscale": 2,              #Величина того, во сколько раз увеличть разшрешение изображения
        "noise_augmentation": 0.0,  #от 0.0 до 1.0
        "negative_prompt": None,    #отрицательное описание (если без него, то None)
        "verbose": False,
        "max_dim": pow(512, 2)      # я не могу генерировать на своей видюхе картинки больше 256 на 256 для x4 и 512 на 512 для x2
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Upscale(self, request, context):
        """Увеличение разрешения исходного изображения (апскейл) по изображению
        Принимает: byte входного изображения и параметры
        Возвращает: int высоты, int ширины сгенерированного изображения и byte самого изображения
        Структура словаря параметров и параметры по-умолчанию:
        params = {
        "model": 0,                         #Номер модели для обработки (0-5)
        "denoise_strength": 0.5,            #Сила удаления шума. 0 для слабого удаления шума (шум сохраняется), 1 для сильного удаления шума. Используется только для модели 5 (realesr-general-x4v3 model)
        "outscale": 4,                      #Величина того, во сколько раз увеличть разшрешение изображения (модель 3 x2, остальные x4)
        "tile": 0,                          #Размер плитки, 0 для отсутствия плитки во время тестирования
        "tile_pad": 10,                     #Заполнение плитки
        "pre_pad": 0,                       #Предварительный размер заполнения на каждой границе
        "face_enhance": False,              #Использовать GFPGAN улучшения лиц
        "fp32": True,                       #Использовать точность fp32 во время вывода. По умолчанию fp16 (половинная точность)
        "alpha_upsampler": "realesrgan",    #Апсемплер для альфа-каналов. Варианты: realesrgan | bicubic
        "gpu-id": None                      #Устройство gpu для использования (по умолчанию = None) может быть 0, 1, 2 для обработки на нескольких GPU
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete_background(self, request, context):
        """Удаление фона изображения
        Принимает: byte входного изображения
        Возвращает: int высоты, int ширины сгенерированного изображения и byte самого изображения
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StableDraw_gRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Gen_caption': grpc.unary_unary_rpc_method_handler(
                    servicer.Gen_caption,
                    request_deserializer=stable__draw__grpc__pb2.FromImageRequest.FromString,
                    response_serializer=stable__draw__grpc__pb2.TextReply.SerializeToString,
            ),
            'Stable_diffusion_text_to_image': grpc.unary_unary_rpc_method_handler(
                    servicer.Stable_diffusion_text_to_image,
                    request_deserializer=stable__draw__grpc__pb2.FromTextRequest.FromString,
                    response_serializer=stable__draw__grpc__pb2.ImageReply.SerializeToString,
            ),
            'Stable_diffusion_image_to_image': grpc.unary_unary_rpc_method_handler(
                    servicer.Stable_diffusion_image_to_image,
                    request_deserializer=stable__draw__grpc__pb2.FromImageandTextRequest.FromString,
                    response_serializer=stable__draw__grpc__pb2.ImageReply.SerializeToString,
            ),
            'Stable_diffusion_depth_to_image': grpc.unary_unary_rpc_method_handler(
                    servicer.Stable_diffusion_depth_to_image,
                    request_deserializer=stable__draw__grpc__pb2.FromImageandTextRequest.FromString,
                    response_serializer=stable__draw__grpc__pb2.ImageReply.SerializeToString,
            ),
            'Stable_diffusion_inpainting': grpc.unary_unary_rpc_method_handler(
                    servicer.Stable_diffusion_inpainting,
                    request_deserializer=stable__draw__grpc__pb2.FromImgandMaskandTextRequest.FromString,
                    response_serializer=stable__draw__grpc__pb2.ImageReply.SerializeToString,
            ),
            'Stable_diffusion_upscaler': grpc.unary_unary_rpc_method_handler(
                    servicer.Stable_diffusion_upscaler,
                    request_deserializer=stable__draw__grpc__pb2.FromImageandTextRequest.FromString,
                    response_serializer=stable__draw__grpc__pb2.ImageReply.SerializeToString,
            ),
            'Stable_diffusion_upscaler_xX': grpc.unary_unary_rpc_method_handler(
                    servicer.Stable_diffusion_upscaler_xX,
                    request_deserializer=stable__draw__grpc__pb2.FromImageandTextRequest.FromString,
                    response_serializer=stable__draw__grpc__pb2.ImageReply.SerializeToString,
            ),
            'Upscale': grpc.unary_unary_rpc_method_handler(
                    servicer.Upscale,
                    request_deserializer=stable__draw__grpc__pb2.FromImageRequest.FromString,
                    response_serializer=stable__draw__grpc__pb2.ImageReply.SerializeToString,
            ),
            'Delete_background': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete_background,
                    request_deserializer=stable__draw__grpc__pb2.FromImgOnlyRequest.FromString,
                    response_serializer=stable__draw__grpc__pb2.ImageReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'StableDraw_gRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StableDraw_gRPC(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Gen_caption(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StableDraw_gRPC/Gen_caption',
            stable__draw__grpc__pb2.FromImageRequest.SerializeToString,
            stable__draw__grpc__pb2.TextReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stable_diffusion_text_to_image(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StableDraw_gRPC/Stable_diffusion_text_to_image',
            stable__draw__grpc__pb2.FromTextRequest.SerializeToString,
            stable__draw__grpc__pb2.ImageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stable_diffusion_image_to_image(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StableDraw_gRPC/Stable_diffusion_image_to_image',
            stable__draw__grpc__pb2.FromImageandTextRequest.SerializeToString,
            stable__draw__grpc__pb2.ImageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stable_diffusion_depth_to_image(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StableDraw_gRPC/Stable_diffusion_depth_to_image',
            stable__draw__grpc__pb2.FromImageandTextRequest.SerializeToString,
            stable__draw__grpc__pb2.ImageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stable_diffusion_inpainting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StableDraw_gRPC/Stable_diffusion_inpainting',
            stable__draw__grpc__pb2.FromImgandMaskandTextRequest.SerializeToString,
            stable__draw__grpc__pb2.ImageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stable_diffusion_upscaler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StableDraw_gRPC/Stable_diffusion_upscaler',
            stable__draw__grpc__pb2.FromImageandTextRequest.SerializeToString,
            stable__draw__grpc__pb2.ImageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stable_diffusion_upscaler_xX(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StableDraw_gRPC/Stable_diffusion_upscaler_xX',
            stable__draw__grpc__pb2.FromImageandTextRequest.SerializeToString,
            stable__draw__grpc__pb2.ImageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Upscale(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StableDraw_gRPC/Upscale',
            stable__draw__grpc__pb2.FromImageRequest.SerializeToString,
            stable__draw__grpc__pb2.ImageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete_background(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StableDraw_gRPC/Delete_background',
            stable__draw__grpc__pb2.FromImgOnlyRequest.SerializeToString,
            stable__draw__grpc__pb2.ImageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
