// <auto-generated />
using System;
using CLI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CLI.Migrations.Task
{
    [DbContext(typeof(TaskContext))]
    partial class TaskContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("CLI.Models.Generation", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskId", "Number");

                    b.HasIndex("ResultId");

                    b.ToTable("Generations");
                });

            modelBuilder.Entity("CLI.Models.Result", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GenerationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Results");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Result");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CLI.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("CLI.Models.CaptionResult", b =>
                {
                    b.HasBaseType("CLI.Models.Result");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Results", t =>
                        {
                            t.Property("Property")
                                .HasColumnName("CaptionResult_Property");
                        });

                    b.HasDiscriminator().HasValue("CaptionResult");
                });

            modelBuilder.Entity("CLI.Models.ImageResult", b =>
                {
                    b.HasBaseType("CLI.Models.Result");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Results", t =>
                        {
                            t.Property("Property")
                                .HasColumnName("ImageResult_Property");
                        });

                    b.HasDiscriminator().HasValue("ImageResult");
                });

            modelBuilder.Entity("CLI.Models.ParamsResult", b =>
                {
                    b.HasBaseType("CLI.Models.Result");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ParamsResult");
                });

            modelBuilder.Entity("CLI.Models.Generation", b =>
                {
                    b.HasOne("CLI.Models.Result", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CLI.Models.Task", null)
                        .WithMany("Generations")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("CLI.Models.Task", b =>
                {
                    b.Navigation("Generations");
                });
#pragma warning restore 612, 618
        }
    }
}
